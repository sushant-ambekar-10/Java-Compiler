import java.awt.*;
import java.awt.event.*;
import java.io.*;
import javax.swing.*;
import java.awt.*;
import javax.swing.border.*;
import javax.swing.text.*;
import javax.swing.undo.*;
import javax.swing.event.*;
import java.awt.datatransfer.*;

public class Compiler extends JFrame implements ActionListener 
{
	Label title,f_nm_l,a_l,kywrd;
	JTextArea t1;
	JButton execute,mode;
	Button s_p,s_m;
	TextField f_nm;
	JComboBox fnt;
	GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
	String list[]=ge.getAvailableFontFamilyNames();
	JMenuBar menu;
	JMenu f,e,h,nw,ed;
	JMenuItem nw_main,nw_app,opn,sv,cmpl,rn,help,exit,cpy,pst,undo,redo,slal;
	JFrame Main;
	Color clr,ct1;
	Clipboard Cboard = getToolkit().getSystemClipboard(); 
	final UndoManager manager = new UndoManager();

	Compiler()
	{
	Dir dir=new Dir(); 
	dir.crtDir();
	clr=new Color(198, 211, 227);
	Dimension screensize = Toolkit.getDefaultToolkit().getScreenSize();
	Main=new JFrame("Java Compiler");
	Main.setLayout(null);
	title=new Label("JAVA COMPILER",Label.CENTER);
	title.setFont(new Font("Georgia", Font.BOLD, 30));
	title.setBounds(20,30,screensize.width-40,(3*screensize.height)/100);
	title.setBackground(clr);
	Main.add(title);
	f_nm_l=new Label("File Name : ");
	f_nm_l.setFont(new Font("Calibri",Font.BOLD,20));
	f_nm_l.setBounds(70,180,(9*screensize.width)/100,(2*screensize.height)/100);
	f_nm_l.setBackground(clr);
	Main.add(f_nm_l);
	f_nm=new TextField();
	f_nm.setBounds(250,175,(20*screensize.width)/100,(2*screensize.width)/100);
	f_nm.setFont(new Font("Calibri",Font.PLAIN,20));
	Main.add(f_nm);
	t1=new JTextArea(25,60);
	t1.setFont(new Font("Courier New",Font.BOLD,24));
	JScrollPane st1=new JScrollPane(t1);
	ct1=t1.getBackground();
	t1.getDocument().addUndoableEditListener(new UndoableEditListener() 
												{
													public void undoableEditHappened(UndoableEditEvent e) 
													{
														manager.addEdit(e.getEdit());
													}
												}
											);
	st1.setBounds(130,220,(80*screensize.width)/100,(60*screensize.height)/100);
	t1.setBackground(Color.WHITE);
	Main.add(st1);
	Icon icon = new ImageIcon("src\\execute.png");
	execute=new JButton(icon);
	execute.setBounds((75*screensize.width)/100,(5*screensize.width)/100,100,100);
	execute.setBackground(Color.WHITE);
	execute.setFont(new Font("Verdana",Font.BOLD,20));
	Main.add(execute);
	s_p=new Button("+");
	s_p.setBounds(70,220,(3*screensize.width)/100,(3*screensize.width)/100);
	s_p.setBackground(Color.WHITE);
	s_p.setFont(new Font("Verdana",Font.BOLD,25));
	Main.add(s_p);
	s_m=new Button("-");
	s_m.setBounds(70,280,(3*screensize.width)/100,(3*screensize.width)/100);
	s_m.setBackground(Color.WHITE);
	s_m.setFont(new Font("Verdana",Font.BOLD,25));

	fnt=new JComboBox(list);
	fnt.setBounds(255+(20*screensize.width)/100,175,(15*screensize.width)/100,(2*screensize.width)/100);
	fnt.setFont(new Font("Courier New",Font.BOLD,20));
	Main.add(fnt);
	
	Main.add(s_m);
	menu=new JMenuBar();
	Font font=new Font("Helvetica",Font.PLAIN,23);
	f=new JMenu("File          ");
	f.setFont(font);
	f.setForeground(Color.WHITE);
	ed=new JMenu("Edit          ");
	ed.setFont(font);
	ed.setForeground(Color.WHITE);
	e=new JMenu("Execute          ");
	e.setFont(font);
	e.setForeground(Color.WHITE);
	h=new JMenu("Help          ");
	h.setFont(font);
	h.setForeground(Color.WHITE);
	mode=new JButton("Dark");
	mode.setBounds((85*screensize.width)/100,70,(8*screensize.width)/100,(5*screensize.height)/100);
	mode.setBackground(new Color(190,190,190));
	mode.setForeground(Color.WHITE);
	mode.setBorder(BorderFactory.createLineBorder(Color.WHITE));
	mode.setFocusPainted(false);
	mode.setFont(new Font("Ariel",Font.BOLD,20));
	Main.add(mode);
	menu.add(f);
	menu.add(ed);
	menu.add(e);
	menu.add(h);
	//menu.add(new JMenu("     "));
	nw=new JMenu("New");
	nw.setFont(font);
	nw_main=new JMenuItem("Stand Alone");
	nw_main.setFont(font);
	nw_app=new JMenuItem("Applet");
	nw_app.setFont(font);
	opn=new JMenuItem("Open");
	opn.setFont(font);
	sv=new JMenuItem("Save");
	sv.setFont(font);
	cmpl=new JMenuItem("Compile");
	cmpl.setFont(font);
	rn=new JMenuItem("Run");
	rn.setFont(font);
	help=new JMenuItem("User Manual");
	help.setFont(font);
	h.add(help);
	exit=new JMenuItem("Exit");
	exit.setFont(font);
	nw.add(nw_main);
	nw.add(nw_app);
	f.add(nw);
	f.add(opn);
	f.add(sv);
	f.add(exit);
	e.add(cmpl);
	e.add(rn);

	s_p.addActionListener(this);
	s_m.addActionListener(this);
	execute.addActionListener(this);
	nw.addActionListener(this);
	nw_main.addActionListener(this);
	nw_app.addActionListener(this);
	opn.addActionListener(this);
	sv.addActionListener(this);
	cmpl.addActionListener(this);
	rn.addActionListener(this);
	h.addActionListener(this);
	exit.addActionListener(this);
	mode.addActionListener(this);
	help.addActionListener(this);
	fnt.addItemListener(new ItemListener()
						{
							public void itemStateChanged(ItemEvent e)
							{
								t1.setFont(new Font(fnt.getSelectedItem()+"",Font.BOLD,t1.getFont().getSize()));
							}
						}
						);
	
	
	opn.setToolTipText("OPEN FILE");
	sv.setToolTipText("SAVE FILE");
	cmpl.setToolTipText("COMPILE AND CREATES .CLASS FILE OR SHOWS ERRORS");
	rn.setToolTipText("EXECUTES THE FILE");
	nw_main.setToolTipText("CREATE NEW FILE WITH main()");
	nw_app.setToolTipText("CREATE NEW FILE WITH applet");
	mode.setToolTipText("CHANGE THEME");
	exit.setToolTipText("EXIT");
	help.setToolTipText("USER MANUAL");
	
	sv.setMnemonic('S');
	sv.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.Event.CTRL_MASK)); 
	opn.setMnemonic('O');
	opn.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.Event.CTRL_MASK)); 
	nw_main.setMnemonic('N');
	nw_main.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.Event.CTRL_MASK)); 
	nw_app.setMnemonic('M');
	nw_app.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.Event.CTRL_MASK)); 
	cmpl.setMnemonic('T');
	cmpl.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.Event.CTRL_MASK)); 
	rn.setMnemonic('R');
	rn.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.Event.CTRL_MASK)); 
	exit.setMnemonic('E');
	exit.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.Event.CTRL_MASK)); 
	help.setMnemonic('H');
	help.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.Event.CTRL_MASK)); 
	
	cpy=new JMenuItem("Copy");
	cpy.setFont(font);
	ed.add(cpy);
	cpy.setMnemonic('C');
	cpy.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.Event.CTRL_MASK)); 
	cpy.addActionListener(this);
	pst=new JMenuItem("Paste");
	pst.setFont(font);
	ed.add(pst);
	pst.setMnemonic('V');
	pst.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.Event.CTRL_MASK)); 
	pst.addActionListener(this);
	undo=new JMenuItem("Undo");
	undo.setFont(font);
	ed.add(undo);
	undo.setMnemonic('Z');
	undo.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.Event.CTRL_MASK)); 
	undo.addActionListener(this);
	redo=new JMenuItem("Redo");
	redo.setFont(font);
	ed.add(redo);
	redo.setMnemonic('Y');
	redo.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.Event.CTRL_MASK)); 
	redo.addActionListener(this);
	slal=new JMenuItem("Select all");
	slal.setFont(font);
	ed.add(slal);
	slal.setMnemonic('A');
	slal.setAccelerator(KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.Event.CTRL_MASK)); 
	slal.addActionListener(this);
	
	Main.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
	Main.addWindowListener(new WindowAdapter()
			{
                public void windowClosing(WindowEvent e){
					if (t1.getText().equals("") && f_nm.getText().equals(""))
						{
						try 
							{
								Runtime.getRuntime().exec("taskkill /f /im cmd.exe") ;
							} catch (Exception exception) {}
							Main.dispose();
						}
					else{
					JFrame f=new JFrame();
					f.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
                    int i=JOptionPane.showConfirmDialog(f, "you want to save this file ?","Save or not",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
             if(i == JOptionPane.YES_OPTION)
			{
				if (f_nm.getText().equals(""))
				{
					JOptionPane.showMessageDialog(null,"Enter File Name");
				}
				else
				{
					save();
					try 
					{
						Runtime.getRuntime().exec("taskkill /f /im cmd.exe") ;
					} catch (Exception exception) {}
					Main.dispose();
				}
            }
			 else if (i== JOptionPane.NO_OPTION)
			{
               try 
				{
					Runtime.getRuntime().exec("taskkill /f /im cmd.exe") ;
				} catch (Exception exception) {}
				Main.dispose();
            }
			else {} 
			}}	});
	Main.getContentPane().setBackground(clr);
	menu.setBackground(new Color(50,50,50));
	Main.setJMenuBar(menu);
	Main.getRootPane().setBorder(BorderFactory.createMatteBorder(0,7,7,7,new Color(50,50,50)));
	Main.setSize(screensize.width, screensize.height-75);
	Main.setVisible(true);
	}

	public static void main(String ar[]) throws Exception
	{
	 UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
	 MyFrame w = new MyFrame();
	 try
	 {
	 Thread.sleep(1000);
	 }catch(Exception e){}
	 if (w.pb.getValue()==100)
		 w.setVisible(false);
		 UIManager.setLookAndFeel("com.sun.java.swing.plaf.motif.MotifLookAndFeel");
		 new Compiler();
	}

	public void actionPerformed(ActionEvent e)
	{
		String s=e.getActionCommand();
		if (s.equals("+"))
		{
			Size t=new Size();
			Font nw_f=t.sizeInc(t1.getFont());
			t1.setFont(nw_f);
		}
		else if (s.equals("-"))
		{
			Size t=new Size();
			Font nw_f=t.sizeDec(t1.getFont());
			t1.setFont(nw_f);
		}
		else if(e.getSource()==mode)
		{
			if(mode.getText().equals("Dark"))
			{
				Main.getContentPane().setBackground(new Color(190,190,190));
				title.setBackground(new Color(190,190,190));
				f_nm_l.setBackground(new Color(190,190,190));
				mode.setText("Light");
				mode.setBackground(Color.WHITE);
				mode.setForeground(Color.BLACK);
				mode.setBorder(BorderFactory.createLineBorder(Color.BLACK));
				t1.setBackground(ct1);
			}
			else
			{
				Main.getContentPane().setBackground(clr);
				title.setBackground(clr);
				f_nm_l.setBackground(clr);
				mode.setText("Dark");
				mode.setBackground(new Color(190,190,190));
				mode.setForeground(Color.WHITE);
				mode.setBorder(BorderFactory.createLineBorder(Color.WHITE));
				t1.setBackground(Color.WHITE);
			}
		}
		else if(e.getSource()==cpy)
		{
			copy();
		}
		else if(e.getSource()==pst)
		{
			try
			{
				paste();
			}catch(Exception ex){}
		}
		else if(e.getSource()==undo)
		{
			try
			{
				manager.undo();
			}catch(Exception ex){}
		}
		else if(e.getSource()==redo)
		{
			try
			{
				manager.redo();
			}catch(Exception ex){}
		}
		else if(e.getSource()==slal)
		{
			t1.selectAll();
		}
		else if (s.equals("Stand Alone"))
		{
		NewMain();
		}
		else if (s.equals("Applet"))
		{
		NewApp();
		}
		else if (s.equals("Open"))
		{
		open();
		}
		else if (s.equals("Save"))
		{
		save();
		}
		else if (s.equals("Compile"))
		{
		compile();
		}
		else if (s.equals("Run"))
		{
		run();
		}
		else if (s.equals("User Manual") || e.getSource()=="help")
		{
			help();
		}
		else if (s.equalsIgnoreCase("Save & Exit")  || e.getSource()==exit)
		{
			save();
			try 
			{
				Runtime.getRuntime().exec("taskkill /f /im cmd.exe") ;
			} catch (Exception exception) {}
			Main.dispose();
		}
		else
		{
		execute();
		}
	}
	
	public void copy()
	{
		String selection = t1.getSelectedText(); 
        if (selection == null) 
        return; 
        StringSelection clipString =new StringSelection(selection); 
        Cboard.setContents(clipString,clipString); 
	}
	
	public void paste() throws Exception
	{
		Transferable clipData = Cboard.getContents(this); 
		String clipString = (String)clipData.getTransferData(DataFlavor.stringFlavor); 
        t1.replaceRange(clipString,t1.getSelectionStart(),t1.getSelectionEnd()); 
	}
	
	public void NewMain()
	{
		t1.setEditable(true);
		f_nm.setEditable(true);
		JFrame frame=new JFrame();
		frame.setLocationRelativeTo(null);
		String i_p=JOptionPane.showInputDialog(frame,"ENTER CLASS NAME");
		f_nm.setText(i_p);
		t1.setText("class "+i_p+"\n{\n\tpublic static void main(String ar[])\n\t{\n\t\t\n\t}\n}");
	}
	
	public void NewApp()
	{
		t1.setEditable(true);
		f_nm.setEditable(true);
		JFrame frame=new JFrame();
		frame.setLocationRelativeTo(null);
		String i_p=JOptionPane.showInputDialog(frame,"ENTER CLASS NAME");
		f_nm.setText(i_p);
		t1.setText("import java.applet.*;\nimport java.awt.*;\n\n/*<applet code= \""+i_p+"\" width=500 height=500></applet> */\n\npublic class "+i_p+" extends Applet\n{\n\tpublic void init()\n\t{\n\t\t\n\t}\n\tpublic void paint(Graphics g)\n\t{\n\t\t\n\t}\n}");
	}

	public void open()
	{
		t1.setEditable(true);
		f_nm.setEditable(true);
		FileDialog f1=new FileDialog(new Frame());
		f1.setVisible(true);
		f1.setLayout(null);
		String o_f_nm=f1.getFile();
		String o_f_d=f1.getDirectory();
		o_f_nm=o_f_nm.substring(0,(o_f_nm.length())-5);
		f_nm.setText(o_f_nm);
		String ch="";
		try
		{
			FileInputStream ip=new 	FileInputStream(f1.getDirectory()+f1.getFile());
			int i;
			while((i=ip.read())!=-1)
			{
				ch=ch+((char)i+"");
			}
			ip.close();
		}
		catch(Exception ex){}
		t1.setText(ch);
	}
	
	public void save()
	{
		t1.setEditable(true);
		f_nm.setEditable(true);
		if (f_nm.getText().equals(""))
		{
			JOptionPane.showMessageDialog(null,"Enter File Name");
		}
		else
		{
			File parentDir = new File("C:\\Java Compiler");
			String filename=f_nm.getText()+".java";
			File f=new File(parentDir,filename);
			if(!f.exists())
			{
				try
				{
					f.createNewFile();
				}
				catch(Exception ex){}
			}
			try
			{
				String text=t1.getText();
				FileWriter op=new FileWriter(f,false);
				op.write(text);
				op.close();
			}
			catch(Exception ex)
			{}
		}
	}

	public void compile()
	{
		try
       		{
			Process p = Runtime.getRuntime().exec("cmd.exe /c cd \""+"C:\\Java Compiler"+"\" & start cmd.exe /k \"javac "+f_nm.getText()+".java");
       		}
     		 catch (Exception ex)
       		{ }
	}

	public void run()
	{
		String s2=t1.getText();
		if(t1.getText().contains("extends Applet") && t1.getText().contains("init"))
		{
			try
			{
				Process p = Runtime.getRuntime().exec("cmd.exe /c cd \""+"C:\\Java Compiler"+"\" & start cmd.exe /k \"appletviewer "+f_nm.getText()+".java");
			}
			catch(Exception ex)
			{}
		}
		else
		{
			try
			{
				Process p = Runtime.getRuntime().exec("cmd.exe /c cd \""+"C:\\Java Compiler"+"\" & start cmd.exe /k \"java  "+f_nm.getText());
			}
       		catch (Exception ex)
        	{}
		}
	}

	public void help()
	{	
		f_nm.setText("");
		String ch="";
		try
		{
			FileInputStream ip=new 	FileInputStream("c:\\Compiler\\src\\Manual.txt");
			int i;
			while((i=ip.read())!=-1)
			{
				ch=ch+((char)i+"");
			}
			ip.close();
		}
		catch(Exception ex){}
		t1.setText(ch);
		t1.setEditable(false);
		f_nm.setEditable(false);
	}

	public void execute()
	{
		if(f_nm.getText().equals(""))
		{
			save();
		}
		else
		{
			save();
			String s2=t1.getText();
			
			if((s2.contains("extends Applet") && s2.contains("init")) || (s2.contains("extends Applet") && s2.contains("init"))  )
			{
				try
				{	
					Process p = Runtime.getRuntime().exec("cmd.exe /c cd \""+"C:\\Java Compiler"+"\" & start cmd.exe /k \"javac "+f_nm.getText()+".java");
					Thread.sleep(1000);
					p.destroy();
					Process p2 = Runtime.getRuntime().exec("cmd.exe /c cd \""+"C:\\Java Compiler"+"\" & start cmd.exe /k \"appletviewer "+f_nm.getText()+".java");
				}
				catch(Exception ex)
				{}
			}
			else
			{
				try
				{
					Process p = Runtime.getRuntime().exec("cmd.exe /c cd \""+"C:\\Java Compiler"+"\" & start cmd.exe /k \"javac "+f_nm.getText()+".java");
					Thread.sleep(1000);
					p.destroy();
					Process p2 = Runtime.getRuntime().exec("cmd.exe /c cd \""+"C:\\Java Compiler"+"\" & start cmd.exe /k \"java  "+f_nm.getText());
				}
				catch (Exception ex)
				{}
			}
		}
	}
}

class Dir 
{
	public void crtDir()
	{
		File f=new File("C:\\Java Compiler");
		if(!f.exists())
		{
			f.mkdir();
		}
	}
}

class Size
{
	public Font sizeInc(Font f)
	{
		
		int i=f.getSize();
		f=new Font(f.getFamily()+"",Font.BOLD,(i+3));
		return f;
	}

	public Font sizeDec(Font f)
	{
		int i=f.getSize();
		f=new Font(f.getFamily()+"",Font.BOLD,(i-3));
		return f;
	}
}

class MyFrame extends JFrame{
  JProgressBar pb;
  public MyFrame(){
    this.setLayout(new FlowLayout());
    setSize(new Dimension(800, 650));
	JLabel b=new JLabel(new ImageIcon("src\\icon.png"));
	b.setBounds(100,76,560,400);
	pb=new JProgressBar(0,100);
	pb.setBounds(100,600,560,25);
	pb.setStringPainted(true);
	add(b);
	add(pb);
	setLayout(null);
	setUndecorated(true);
    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	setVisible(true);
	setLocationRelativeTo(null);
	setBackground(new Color(50,50,50,50));
	com.sun.awt.AWTUtilities.setWindowOpaque(this,false);
	iterate();
  }
  
  public void iterate()
  {
	for(int i=0;i<=100;i++)
	{
		pb.setValue(i);
		try{
		Thread.sleep(10);}catch(Exception e){}
	}
  }
}